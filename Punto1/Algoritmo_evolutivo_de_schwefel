import random
import numpy as np
from deap import algorithms, base, creator, tools


def schwefel(x):
    y = 0
    for i in range(len(x)):
        y += -x[i] * np.sin(np.sqrt(np.abs(x[i])))
    return y

creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

toolbox = base.Toolbox()

# Definir la estrategia de selección, cruce y mutación
toolbox.register("attr_float", random.uniform, -500, 500)
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_float, n=2)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("evaluate", schwefel)
toolbox.register("mate", tools.cxBlend, alpha=0.5)
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=10, indpb=0.1)
toolbox.register("select", tools.selTournament, tournsize=3)

# Definir los parámetros de la optimización
population_size = 100
num_generations = 50
cxpb = 0.5  # Probabilidad de cruce
mutpb = 0.2  # Probabilidad de mutación

# Crear la población inicial
population = toolbox.population(n=population_size)

# Ejecutar la optimización
for gen in range(num_generations):
    offspring = algorithms.varAnd(population, toolbox, cxpb=cxpb, mutpb=mutpb)
    fits = toolbox.map(toolbox.evaluate, offspring)
    for fit, ind in zip(fits, offspring):
        fitness = np.asarray([schwefel(individual) for individual in population])
    population = toolbox.select(offspring, k=len(population))

# Obtener el mejor individuo
best_ind = tools.selBest(population, k=1)[0]
fitness = np.asarray(list(toolbox.map(toolbox.evaluate, population)))

print("Mejor individuo encontrado:")
print("x1 =", best_ind[0])
print("x2 =", best_ind[1])
print("Fitness =", fitness)
